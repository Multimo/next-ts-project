import { INode, Type, IType, IContext, IValidationResult, IAnyType } from "../../internal";
export declare class Late<C, S, T> extends Type<C, S, T> {
    readonly definition: () => IAnyType;
    private _subType;
    readonly flags: number;
    readonly shouldAttachNode: boolean;
    readonly subType: IAnyType;
    constructor(name: string, definition: () => IAnyType);
    instantiate(parent: INode | null, subpath: string, environment: any, snapshot: any): INode;
    reconcile(current: INode, newValue: any): INode;
    describe(): string;
    isValidSnapshot(value: any, context: IContext): IValidationResult;
    isAssignableFrom(type: IAnyType): boolean;
}
export declare function late<C, S, T>(type: () => IType<C, S, T>): IType<C, S, T>;
export declare function late<C, S, T>(name: string, type: () => IType<C, S, T>): IType<C, S, T>;
export declare function isLateType(type: any): type is Late<any, any, any>;
