import { INode, Type, IContext, IValidationResult, TypeFlags, ObjectNode, IType, ISimpleType } from "../../internal";
export declare class Frozen<T> extends Type<T, T, T> {
    private subType;
    readonly shouldAttachNode: boolean;
    flags: TypeFlags;
    constructor(subType?: IType<any, any, any> | undefined);
    describe(): string;
    instantiate(parent: ObjectNode | null, subpath: string, environment: any, value: any): INode;
    isValidSnapshot(value: any, context: IContext): IValidationResult;
}
export declare type CreationTypeOf<T extends IType<any, any, any>> = T extends IType<infer C, any, any> ? C : never;
export declare function frozen<T extends IType<any, any, any>>(subType: T): ISimpleType<CreationTypeOf<T>>;
export declare function frozen<T>(defaultValue: T): IType<T | undefined, T, Readonly<T>>;
export declare function frozen<T = any>(): IType<T | undefined, T | undefined, Readonly<T> | undefined>;
export declare function isFrozenType(type: any): type is Frozen<any>;
