import { INode, Type, IType, TypeFlags, IContext, IValidationResult, ObjectNode } from "../../internal";
export declare class IdentifierType extends Type<string, string, string> {
    readonly shouldAttachNode: boolean;
    readonly flags: TypeFlags;
    constructor();
    instantiate(parent: ObjectNode | null, subpath: string, environment: any, snapshot: string): INode;
    reconcile(current: INode, newValue: string): INode;
    describe(): string;
    isValidSnapshot(value: any, context: IContext): IValidationResult;
}
export declare class IdentifierNumberType extends IdentifierType {
    constructor();
    instantiate(parent: ObjectNode | null, subpath: string, environment: any, snapshot: any): INode;
    isValidSnapshot(value: any, context: IContext): IValidationResult;
    reconcile(current: INode, newValue: any): INode;
    getSnapshot(node: INode): any;
    describe(): string;
}
/**
 * Identifiers are used to make references, lifecycle events and reconciling works.
 * Inside a state tree, for each type can exist only one instance for each given identifier.
 * For example there couldn't be 2 instances of user with id 1. If you need more, consider using references.
 * Identifier can be used only as type property of a model.
 * This type accepts as parameter the value type of the identifier field that can be either string or number.
 *
 * @example
 *  const Todo = types.model("Todo", {
 *      id: types.identifier,
 *      title: types.string
 *  })
 *
 * @export
 * @alias types.identifier
 * @template T
 * @returns {IType<T, T>}
 */
export declare const identifier: IType<string, string, string>;
/**
 * Similar to `types.identifier`, but `identifierNumber` will serialize from / to a number when applying snapshots
 *
 * @example
 *  const Todo = types.model("Todo", {
 *      id: types.identifierNumber,
 *      title: types.string
 *  })
 *
 * @export
 * @alias types.identifierNumber
 * @template T
 * @returns {IType<T, T>}
 */
export declare const identifierNumber: IType<number, number, number>;
export declare function isIdentifierType(type: any): type is IdentifierType | IdentifierNumberType;
