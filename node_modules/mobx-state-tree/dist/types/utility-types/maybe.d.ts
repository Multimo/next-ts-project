import { IType, TypeFlags } from "../../internal";
/**
 * Maybe will make a type nullable, and also optional.
 * The value `undefined` will be used to represent nullability.
 *
 * @export
 * @alias types.maybe
 * @template S
 * @template T
 * @param {IType<S, T>} type The type to make nullable
 * @returns {(IType<S | undefined, T | undefined>)}
 */
export declare function maybe<C, S, T>(type: IType<C, S, T>): IType<S | undefined, S | undefined, T | undefined> & {
    flags: TypeFlags.Optional;
};
/**
 * Maybe will make a type nullable, and also optional.
 * The value `null` will be used to represent no value.
 *
 * @export
 * @alias types.maybeNull
 * @template S
 * @template T
 * @param {IType<S, T>} type The type to make nullable
 * @returns {(IType<S | null, T | null>)}
 */
export declare function maybeNull<C, S, T>(type: IType<C, S, T>): IType<S | null | undefined, S | null, T | null> & {
    flags: TypeFlags.Optional;
};
