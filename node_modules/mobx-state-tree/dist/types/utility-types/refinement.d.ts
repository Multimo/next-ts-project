import { INode, IType, Type, IContext, IValidationResult, IAnyType } from "../../internal";
export declare class Refinement<C, S, T> extends Type<C, S, T> {
    readonly type: IAnyType;
    readonly predicate: (v: any) => boolean;
    readonly message: (v: any) => string;
    readonly flags: number;
    readonly shouldAttachNode: boolean;
    constructor(name: string, type: IAnyType, predicate: (v: any) => boolean, message: (v: any) => string);
    describe(): string;
    instantiate(parent: INode, subpath: string, environment: any, value: any): INode;
    isAssignableFrom(type: IAnyType): boolean;
    isValidSnapshot(value: any, context: IContext): IValidationResult;
}
export declare function refinement<C, S, T>(name: string, type: IType<C, S, T>, predicate: (snapshot: C) => boolean, message?: string | ((v: any) => string)): IType<C, S, T>;
export declare function refinement<C, S, T>(type: IType<C, S, T>, predicate: (snapshot: C) => boolean, message?: string | ((v: any) => string)): IType<C, S, T>;
export declare function isRefinementType(type: any): type is Refinement<any, any, any>;
