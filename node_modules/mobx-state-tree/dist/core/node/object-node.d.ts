import { IAtom } from "mobx";
import { INode, IJsonPatch, IReversibleJsonPatch, IDisposer, IMiddleware, IMiddlewareHandler, NodeLifeCycle, IdentifierCache, IAnyType } from "../../internal";
export declare type LivelynessMode = "warn" | "error" | "ignore";
/**
 *  Defines what MST should do when running into reads / writes to objects that have died.
 * By default it will print a warning.
 * Use te `"error"` option to easy debugging to see where the error was thrown and when the offending read / write took place
 *
 * Possible values: `"warn"`, `"error"` and `"ignore"`
 *
 * @export
 * @param {LivelynessMode} mode
 */
export declare function setLivelynessChecking(mode: LivelynessMode): void;
export interface IChildNodesMap {
    [key: string]: INode;
}
export declare class ObjectNode implements INode {
    nodeId: number;
    readonly type: IAnyType;
    readonly identifierAttribute: string | undefined;
    readonly identifier: string | null;
    subpathAtom: IAtom;
    subpath: string;
    escapedSubpath: string;
    parent: ObjectNode | null;
    state: NodeLifeCycle;
    storedValue: any;
    identifierCache: IdentifierCache | undefined;
    isProtectionEnabled: boolean;
    middlewares: IMiddleware[] | null;
    applyPatches(patches: IJsonPatch[]): void;
    applySnapshot(snapshot: any): void;
    _autoUnbox: boolean;
    _environment: any;
    _isRunningAction: boolean;
    _hasSnapshotReaction: boolean;
    private _disposers;
    private _patchSubscribers;
    private _snapshotSubscribers;
    private _observableInstanceCreated;
    private _childNodes;
    private _initialSnapshot;
    private _createNewInstance;
    private _finalizeNewInstance;
    constructor(type: IAnyType, parent: ObjectNode | null, subpath: string, environment: any, initialSnapshot: any, createNewInstance: (initialValue: any) => any, finalizeNewInstance: (node: INode, initialValue: any) => void);
    private _createObservableInstance();
    readonly path: string;
    readonly root: ObjectNode;
    readonly isRoot: boolean;
    setParent(newParent: ObjectNode | null, subpath?: string | null): void;
    fireHook(name: string): void;
    readonly value: any;
    private readonly _value;
    readonly snapshot: any;
    private _getActualSnapshot();
    private _getInitialSnapshot();
    isRunningAction(): boolean;
    readonly isAlive: boolean;
    assertAlive(): void;
    getChildNode(subpath: string): INode;
    getChildren(): ReadonlyArray<INode>;
    getChildType(key: string): IAnyType;
    readonly isProtected: boolean;
    assertWritable(): void;
    removeChild(subpath: string): void;
    unbox(childNode: INode): any;
    toString(): string;
    finalizeCreation(): void;
    detach(): void;
    preboot(): void;
    die(): void;
    aboutToDie(): void;
    finalizeDeath(): void;
    onSnapshot(onChange: (snapshot: any) => void): IDisposer;
    emitSnapshot(snapshot: any): void;
    onPatch(handler: (patch: IJsonPatch, reversePatch: IJsonPatch) => void): IDisposer;
    emitPatch(basePatch: IReversibleJsonPatch, source: INode): void;
    addDisposer(disposer: () => void): void;
    removeMiddleware(handler: IMiddlewareHandler): void;
    addMiddleWare(handler: IMiddlewareHandler, includeHooks?: boolean): () => void;
    applyPatchLocally(subpath: string, patch: IJsonPatch): void;
    private _addSnapshotReaction();
}
