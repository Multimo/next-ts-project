{"version":3,"file":"4.1e7c625eecd3d3bd2865.hot-update.js","sources":["webpack:///pages/index.tsx","webpack:///src/models/store.ts"],"sourcesContent":["import React from 'react';\nimport { Provider } from 'mobx-react'\nimport { applySnapshot } from 'mobx-state-tree'\nimport { rehydrateStore, alStore, initStore } from '../src/models/store'\nimport Albums from '../src/components/albums'\n\ninterface Props {\n  initialState: any,\n  isServer: boolean,\n}\n\nexport default class PostsPage extends React.Component<Props> {\n  store: any;\n\n  static async getInitialProps ({ req }) {\n    return await initStore(); \n  }\n\n  constructor (props) {\n    super(props)\n    this.props.initialState && applySnapshot(alStore, this.props.initialState);\n    this.store = alStore; \n  }\n\n  render () {\n    const { initialState } = this.props;  \n    console.log('%s ================= This store', this.store)\n    return (\n      <Provider store={this.store || initialState}>\n        <Albums title='Index Page' linkTo='/posts' />\n      </Provider>\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// pages/index.tsx","import { types, applySnapshot, flow, getSnapshot } from 'mobx-state-tree';\n\n// isomophic fetch since fetch only works only exists on the window\nimport fetch from 'node-fetch';\n\nlet store = null\n\nexport const getAlbums = async () => {\n  try {\n    const res = await fetch('https://jsonplaceholder.typicode.com/albums');\n    const albums = await res.json();\n    return albums;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport const getPosts = async () => {\n  try {\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n    const posts = await res.json();\n    return posts;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nconst Album = types.model('Album' ,{\n  id: types.number,\n  userId: types.number,\n  title: types.string,\n})\n\nconst Post = types.model('Post' ,{\n  id: types.number,\n  userId: types.number,\n  title: types.string,\n})\n\nexport const albumStore = types\n  .model('store', {\n    albums: types.optional(types.array(Album), []),\n    posts: types.optional(types.array(Post), []),\n    toggle: types.optional(types.boolean, false),\n  })\n  .actions((self) => ({\n    toggler() {\n      self.toggle = !self.toggle;\n    },\n  }));\n    // const fetchAlbums = flow(function* () {\n    //   const res = yield getAlbums();\n    //   console.log('FETCHED!!!!!!!!!!!!!!!!!')\n    //   applySnapshot(self.albums, res)\n    // });\n\n    // return ({\n    //   // afterCreate() {\n    //   //   fetchAlbums()\n    //   // },\n    //   fetchAlbums,\n      \n    // });\n  // });\n\nexport const alStore = albumStore.create();\n\n// export const rehydrateStore = async (isServer: boolean, snapshot = null) => {\n//   if (isServer || alStore.albums.length === 0) {\n//     const hellomyoldfirend = await getAlbums();\n//     const posts = await getPosts();\n//     console.log()\n//     store = albumStore.create({\n//       albums: hellomyoldfirend || [],\n//       posts: posts || [],\n//     });\n//     return { \n//       initialState: getSnapshot(store), \n//       isServer, \n//     };\n//   }\n  \n\n//   // if (snapshot) {\n//   //   console.log('is store alive?', alStore, snapshot)\n//   //   return store\n//   // }\n//     // store = applySnapshot(alStore, snapshot)\n\n//   return alStore;\n// };\n\nexport const rehydrateStore = (initialState) => {\n  initialState && applySnapshot(alStore, initialState);\n  return alStore;\n}\n\nexport const initStore = async () => {\n    const hellomyoldfirend = await getAlbums();\n    const posts = await getPosts();\n    console.log()\n    store = albumStore.create({\n      albums: hellomyoldfirend || [],\n      posts: posts || [],\n    });\n    return { \n      initialState: getSnapshot(store), \n    };\n};\n\n\n\n\n// WEBPACK FOOTER //\n// src/models/store.ts"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;;;;;AAGA;;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAIA;AACA;;;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AArBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAAA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}